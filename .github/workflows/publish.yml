name: Reusable Publish Workflow

on:
  workflow_call:
    secrets:
      release_queue_url:
        required: true
      splunkbase_user:
        required: true
      splunkbase_password:
        required: true
      semantic_release_pk:
        required: true

jobs:
  semantic-version:
      runs-on: ubuntu-latest
      permissions:
        contents: write
        pull-requests: write
      steps:
        - uses: actions/create-github-app-token@v1
          id: app-token
          with:
            app-id: ${{ vars.SEMANTIC_RELEASE_APP_ID }}
            private-key: ${{ secrets.semantic_release_pk }}

        - name: Check out app repo
          uses: actions/checkout@v4
          with:
              fetch-depth: 0
              token: ${{ steps.app-token.outputs.token }}

        - name: Set up Python
          uses: actions/setup-python@v5
          with:
            python-version: '3.9'

        - name: Cache pip
          uses: actions/cache@v4
          with:
            path: ~/.cache/pip
            key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

        - name: Set up .github repo
          uses: actions/checkout@v4
          with:
            repository: splunk-soar-connectors/.github
            path: dotgithub

        - name: Copy necessary files to app repo for semantic release
          run: |
            cp dotgithub/.releaserc.json $(pwd)/.releaserc.json
            cp dotgithub/.github/utils/update_version.py $(pwd)/update_version.py

        - name: Set up Node.js
          uses: actions/setup-node@v4
          with:
            node-version: "lts/*"

        - name: Install dependencies
          run: |
            npm install --save-dev semantic-release
            npm install @semantic-release/changelog @semantic-release/git @semantic-release/exec -D
            pip install tomlkit

        - name: Run semantic-release and update version numbers
          env:
            GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          run: |
            npx semantic-release -e $(pwd)/.releaserc.json --tag-format "\${version}"

          # Semantic-release will "pass" even if we don't increase the version
          # We need to clear unreleased release notes in this case
        - name: Clear unreleased notes
          run: |
              echo "**Unreleased**" > $(pwd)/release_notes/unreleased.md

        - name: Clean up
          run: |
              rm -rf dotgithub
              rm -f update_version.py

  detect-app-type:
    runs-on: ubuntu-latest
    outputs:
      is_sdkfied: ${{ steps.detect.outputs.is_sdkfied }}
      uv_lock_directory: ${{ steps.detect.outputs.uv_lock_directory }}
    steps:
      - name: Check out app repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Detect App Type
        id: detect
        run: |
          echo "Detecting app type..."
          
          # Find uv.lock file and get its parent directory
          UV_LOCK_PATH=$(find . -name "uv.lock" -type f | head -1)
          
          if [ -n "$UV_LOCK_PATH" ]; then
            UV_LOCK_DIR=$(dirname "$UV_LOCK_PATH")
            echo "Found uv.lock in directory: $UV_LOCK_DIR"
            echo "This is an SDKfied app"
            echo "is_sdkfied=true" >> $GITHUB_OUTPUT
            echo "uv_lock_directory=$UV_LOCK_DIR" >> $GITHUB_OUTPUT
          else
            echo "No uv.lock found"
            echo "This is a traditional app"
            echo "is_sdkfied=false" >> $GITHUB_OUTPUT
            echo "uv_lock_directory=" >> $GITHUB_OUTPUT
          fi
          
          echo "App detection completed"
        shell: bash
  
  build:
    runs-on: ubuntu-latest
    needs: [semantic-version, detect-app-type]
    env:
      IS_SDKFIED: ${{ needs.detect-app-type.outputs.is_sdkfied }}
      UV_LOCK_DIRECTORY: ${{ needs.detect-app-type.outputs.uv_lock_directory }}
    steps:
      - name: Check out app repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Cache pip
        if: env.IS_SDKFIED == 'false'
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Build Application
        if: env.IS_SDKFIED == 'false'
        uses: splunk-soar-connectors/.github/.github/actions/build-app@main
      
      - name: Setup SDKfied App Environment
        if: env.IS_SDKFIED == 'true'
        uses: splunk-soar-connectors/.github/.github/actions/sdkfied-app-setup@main
        with:
          uv_lock_directory: ${{ env.UV_LOCK_DIRECTORY }}
      
      - name: Build SDK app
        if: env.IS_SDKFIED == 'true'
        run: |

          cd "${{ env.UV_LOCK_DIRECTORY }}"
          echo "Building SDKfied app using soarapps CLI"
          uv run soarapps package build . --output-file /tmp/${{ github.event.repository.name }}.tgz
          echo "SDKfied app build completed successfully"

      - name: Upload app tar file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-tar
          path: /tmp/${{ github.event.repository.name }}.tgz

  publish:
    runs-on:
      - codebuild-integration-tests-${{ github.run_id }}-${{ github.run_attempt }}
      - image:custom-linux-875003031410.dkr.ecr.us-west-2.amazonaws.com/soar-connectors/pytest:f7150dbb7f347d35f8f4bb285d36985ecd4cf231
    needs: build
    outputs:
      return_code: ${{ steps.set-outputs.outputs.return_code }}
    permissions:
      contents: write
    steps:
      - name: Check out app repo
        uses: actions/checkout@v4

      - name: Download app tar file for upload
        uses: actions/download-artifact@v4
        with:
          name: app-tar
          path: ${{ github.workspace }}/artifacts

      - name: Publish
        uses: splunk-soar-connectors/.github/.github/actions/publish@main
        env:
          UPLOAD_PATH: "${{ github.workspace }}/artifacts/${{ github.event.repository.name }}.tgz"
          RELEASE_QUEUE_URL: ${{ secrets.release_queue_url }}
          SPLUNKBASE_USER: ${{ secrets.splunkbase_user }}
          SPLUNKBASE_PASSWORD: ${{ secrets.splunkbase_password }}

      - name: Set outputs
        if: always()
        id: set-outputs
        run: |
          echo "return_code=${{ env.return_code }}" >> $GITHUB_OUTPUT
          if [ "$return_code" -ne 0 ]; then
            echo "Publish script failed with return code $return_code, failing the job."
            exit $return_code
          fi
    
  metrics:
    runs-on:
      - codebuild-integration-tests-${{ github.run_id }}-${{ github.run_attempt }}
      - image:custom-linux-875003031410.dkr.ecr.us-west-2.amazonaws.com/soar-connectors/pytest:f7150dbb7f347d35f8f4bb285d36985ecd4cf231
    needs: publish
    if: always()
    steps:
    - name: Check out app repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

    - name: Run metrics
      uses: splunk-soar-connectors/.github/.github/actions/metrics@main
      with:
        publish_return_code: ${{ needs.publish.outputs.return_code }}
