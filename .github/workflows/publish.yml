name: Reusable Publish Workflow

on:
  workflow_call:
    secrets:
      release_queue_url:
        required: true
      splunkbase_user:
        required: true
      splunkbase_password: 
        required: true  

jobs:
  semantic-version:
      runs-on: ubuntu-latest
      steps:
        - name: Setup Environment
          uses: splunk-soar-connectors/.github/.github/actions/env-setup@main

        - name: Set up .github repo
          uses: actions/checkout@v4
          with:
            repository: splunk-soar-connectors/.github
            path: dotgithub

        - name: Copy necessary files to app repo for semantic release
          run: |
            cp dotgithub/.releaserc.json $(pwd)/.releaserc.json
            cp dotgithub/.github/utils/update_version.py $(pwd)/update_version.py

        - name: Set up Node.js
          uses: actions/setup-node@v4
          with:
            node-version: "lts/*"
            cache: "npm"

        - name: Install dependencies
          run: |
            npm install --save-dev semantic-release
            npm install @semantic-release/changelog @semantic-release/git @semantic-release/exec -D

        - name: Run semantic-release and update version numbers
          env:
            GITHUB_TOKEN: ${{ github.token }}
          run: |
            npx semantic-release -e $(pwd)/.releaserc.json

        - name: Clean up
          run: |
              rm -rf dotgithub         
              rm -f update_version.py

  build:
    runs-on: ubuntu-latest
    needs: []
    steps:
      - name: Setup Environment
        uses: splunk-soar-connectors/.github/.github/actions/env-setup@main

      - name: Build Application
        uses: splunk-soar-connectors/.github/.github/actions/build-app@main

      - name: Upload app tar file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-tar
          path: ${{ github.event.repository.name }}.tgz

  publish:
    runs-on:
      - codebuild-integration-tests-${{ github.run_id }}-${{ github.run_attempt }}
      - image:custom-linux-875003031410.dkr.ecr.us-west-2.amazonaws.com/soar-connectors/pytest:f7150dbb7f347d35f8f4bb285d36985ecd4cf231
    needs: build
    outputs:
      return_code: ${{ steps.set-outputs.outputs.return_code }}
    permissions:
      contents: write
    steps:
      - name: Check out app repo
        uses: actions/checkout@v4

      - name: Download app tar file for upload
        uses: actions/download-artifact@v4
        with:
          name: app-tar
          path: ${{ github.workspace }}/artifacts

      - name: Publish
        uses: splunk-soar-connectors/.github/.github/actions/publish@tapishj/PAPP-35446
        env:
          UPLOAD_PATH: "${{ github.workspace }}/artifacts/${{ github.event.repository.name }}.tgz"
          RELEASE_QUEUE_URL: ${{ secrets.release_queue_url }}
          SPLUNKBASE_USER: ${{ secrets.splunkbase_user }}
          SPLUNKBASE_PASSWORD: ${{ secrets.splunkbase_password }}
      
      - name: Set outputs
        if: always()
        id: set-outputs
        run: |
          echo "return_code=${{ env.return_code }}" >> $GITHUB_OUTPUT
          if [ "$return_code" -ne 0 ]; then
            echo "Publish script failed with return code $return_code, failing the job."
            exit $return_code
          fi

  
  metrics:
    runs-on:
      - codebuild-integration-tests-${{ github.run_id }}-${{ github.run_attempt }}
      - image:custom-linux-875003031410.dkr.ecr.us-west-2.amazonaws.com/soar-connectors/pytest:f7150dbb7f347d35f8f4bb285d36985ecd4cf231
    needs: publish
    if: always()
    steps:
    - name: Check out app repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

    - name: Run metrics
      uses: splunk-soar-connectors/.github/.github/actions/metrics@tapishj/PAPP-35446
      with:
        publish_return_code: ${{ needs.publish.outputs.return_code }}
