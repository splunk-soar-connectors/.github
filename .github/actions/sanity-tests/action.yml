name: "Sanity Tests"
description: "Runs sanity tests on the app"
inputs:
  phantom_ip:
    description: "Phantom instance the tests are ran on"
    required: true
  version:
    description: "Phantom version being tested"
    required: true
  app_repo:
    description: "Connector repo being tested"
    required: true
  automation_broker:
    description: "Automation broker to use for cloud tests"
    required: false
  automation_broker_next:
    description: "Automation broker to use for next cloud tests"
    required: false
runs:
  using: "composite"
  steps:
    - name: Clone necessary repositories
      shell: bash
      run: |
        cd ..
        if [ ! -d "app-tests" ]; then
          git clone https://oauth2:$GITLAB_API_TOKEN@cd.splunkdev.com/phantom-apps/app-tests.git
        else
          echo "Repository 'app-tests' already exists. Skipping clone."
        fi
    - name: Run app tests
      env:
        APP_TESTS_BRANCH: ${{ github.head_ref || github.ref_name }}
      shell: bash
      run: |
        phantom_ip=${{ inputs.phantom_ip }}
        export PHANTOM_URL="https://$phantom_ip"
        python ${{ github.action_path }}/../../utils/app_rest_installer.py ${{ inputs.app_repo }}.tgz $phantom_ip $PHANTOM_USERNAME $PHANTOM_PASSWORD
        if [[ "${{ inputs.app_repo }}" == *"aws"* ]]; then
          python ${{ github.action_path }}/../../utils/app_rest_installer.py ${{ inputs.app_repo }}.tgz "$AWS_PHANTOM_INSTANCE_CURRENT_VERSION_IP" $AWS_PHANTOM_USERNAME $AWS_PHANTOM_PASSWORD
          python ${{ github.action_path }}/../../utils/app_rest_installer.py ${{ inputs.app_repo }}.tgz "$AWS_PHANTOM_INSTANCE_PREVIOUS_VERSION_IP" $AWS_PHANTOM_USERNAME $AWS_PHANTOM_PASSWORD
        fi
        cd ../app-tests
        if ! git checkout origin/$APP_TESTS_BRANCH &> /dev/null; then
          echo "Could not find app-tests branch $APP_TESTS_BRANCH, defaulting to main."
          git checkout main
        fi
        if [[ "${{ inputs.version }}" == "cloud" ]]; then
          if [[ "${{ inputs.automation_broker }}" == "" ]]; then
            echo "ERROR - automation_broker is required for cloud!"
            exit 1
          fi
          export AUTOMATION_BROKER="${{ inputs.automation_broker }}"
          echo "Tests will use automation broker $AUTOMATION_BROKER"
        fi
        if [[ "${{ inputs.version }}" == "cloud_next" ]]; then
          if [[ "${{ inputs.automation_broker_next }}" == "" ]]; then
            echo "ERROR - automation_broker is required for cloud!"
            exit 1
          fi
          export AUTOMATION_BROKER="${{ inputs.automation_broker_next }}"
          echo "Tests will use automation broker $AUTOMATION_BROKER"
        fi
        if ! vault login -method=aws role=$VAULT_ROLE &> /dev/null; then
          echo "Failed to authenticate with Vault!"
          exit 1
        fi
        if [[ ! -d suite/apps/"${{ inputs.app_repo }}" ]]; then
          echo "ERROR - expected to find test suite for Splunk supported app ${{ inputs.app_repo }}"
          exit 1
        fi
        # Run tests and capture output
        pytest suite/apps/"${{ inputs.app_repo }}" -m "not ui and sanity" --color=yes --reruns=$NUM_TEST_RETRIES --tb=native -v --tb=short | tee /tmp/sanity-test-output.txt

        # Save test results for aggregation
        echo "Test run completed for ${{ inputs.version }} environment" >> /tmp/sanity-test-output.txt

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()  # Upload even if tests failed
      with:
        name: test-results-sanity-${{ inputs.version }}
        path: /tmp/sanity-test-output.txt
